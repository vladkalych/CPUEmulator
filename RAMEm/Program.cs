using RAMEm.Convertor;
using RAMEm.CPU;
using RAMEm.RAM;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace RAMEm 
{
	class Program 
	{
		static void Main() 
		{
			CPUem cpu = new CPUem(new RAMem(1024)); // 1024 byte

			//byte[] instruction = 
			//{ 
			//	0x13, 0x01, 0x01,						// AL <- 0x01
			//	0x13, 0x02, 0x0A,						// CL <- 0x0A
			//	0x15, 0x01, 0x02						// AL = AL + CL
			//}; 

			//byte[] instruction =
			//{
			//	0x13, 0x01, 0xFF,						// AL <- 0xFF
			//	0x12, 0x01, 0x00, 0x00, 0x00, 0x01,		// Memory 0x0001 <- AL
			//	0x11, 0x02, 0x01, 0x00, 0x00, 0x00		// CL <- Memory 0x0001 
			//};

			//byte[] instruction =
			//{
			//	0x13, 0x01, 0xFF,						// AL <- 0xFF
			//	0x13, 0x02, 0xEE,						// CL <- 0xEE
			//	0x20, 0x01, 0x02,						// AL = AL - CL
			//};

			// 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21,
			// H	 e     l     l     o     ,           w     o     r     l     d     !

			// byte[] instruction =
			// {
			// 	0x43, 0x20, 0x00, 0x00, 0x00, 0x00,
			// 	0x43, 0x21, 0x0D, 0x00, 0x00, 0x00,
			// 	0xF0
			// };

			// cpu.ram.Write(0x0, new byte[] { 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21 }); // Hello, world!

			// *** Start

			//byte[] instruction =
			//{
			//	0x43, 0x20, 0x00, 0x00, 0x00, 0x00,
			//	0x43, 0x21, 0x01, 0x00, 0x00, 0x00,
			//	0xF0
			//};

			//cpu.ram.Write(0x0, 0x2);

			//cpu.Run(instruction);

			// Finish ***

			// ----------------------------------------------------------------------------------------------------------------------------------

			// Переводим числа в массив аски символов
			// byte[] array = new byte[] { 0x1E, 0x34, 0xFF }; // числа 30, 52, 255

			// Аски символы в числа
			// byte[] array1 = new byte[] { 0x31, 0x30, 0x39, 0x39, 0x39 }; // символы числа 10999

			//byte[] instruction =
			//{
			//	0x43, 0x20, 0x00, 0x00, 0x00, 0xF2,	// EAX <- 0x14 (DEC = 20)
			//	0x42, 0x00, 0x00, 0x00, 0x00, 0x20,	// Memory[0x00000000] <- EAX
			//	0x43, 0x20, 0x00, 0x00, 0x00, 0x00,	// EAX <- 0x00 (address)
			//	0x43, 0x21, 0x04, 0x00, 0x00, 0x00, // EBX <- 0x04 (length)
			//	0xF5,								// CALL 0xF5 (Convert to ASCII)
			//	0xF0								// CALL 0xF0 (Print to console)
			//};

			//byte[] instruction =
			//{
			//	0x13, 0x01, 0xF2,					// AL <- 0xF2 (DEC = 242)
			//	0x12, 0x00, 0x00, 0x00, 0x00, 0x01,	// Memory[0x00000000] <- AL
			//	0x43, 0x20, 0x00, 0x00, 0x00, 0x00,	// EAX <- 0x00 (address)
			//	0x43, 0x21, 0x01, 0x00, 0x00, 0x00, // EBX <- 0x01 (length)
			//	0xF5,								// CALL 0xF5 (Convert to ASCII)
			//	0xF0								// CALL 0xF0 (Print to console)
			//};

			cpu.ram.Write(0x00000000, new byte[] { 0x31, 0x00, 0x32, 0x00 }); // 1, 2

			byte[] instruction =
			{ 
				0x43, 0x20, 0x00, 0x00, 0x00, 0x00,	// EAX <- 0x00 (address)
				0x43, 0x21, 0x02, 0x00, 0x00, 0x00,	// EBX <- 0x02 (length)
				0xF6,								// CALL 0xF5 (Convert from ASCII)
				0x43, 0x20, 0x02, 0x00, 0x00, 0x00,	// EAX <- 0x03 (address)
				0x43, 0x21, 0x02, 0x00, 0x00, 0x00,	// EBX <- 0x02 (length)
				0xF6,								// CALL 0xF5 (Convert from ASCII)
				0x11, 0x01, 0x00, 0x00, 0x00, 0x00, // AL <- Memory[0x00000000]
				0x11, 0x02, 0x02, 0x00, 0x00, 0x00,	// CL <- Memory[0x00000002]
				0x15, 0x01, 0x02,					// AL = AL + CL
				0x12, 0x00, 0x00, 0x00, 0x00, 0x01, // Memory[0x00000000] <- AL
				0x43, 0x20, 0x00, 0x00, 0x00, 0x00, // EAX <- 0x00 (address)
				0x43, 0x21, 0x01, 0x00, 0x00, 0x00, // EBX <- 0x01 (length)
				0xF5,								// CALL 0xF5 (Convert to ASCII)
				0xF0								// CALL 0xF0 (Print to console)
			};

			cpu.Run(instruction);
        }

		

	}
}